#pragma once

#ifndef DISTORTIONSOUNDEFFECT_H
#define DISTIONSOUNDEFFECT_H

///////////////////////////////////////////////////////////////////////////////////////////////
///
/// HEADERS
///
///////////////////////////////////////////////////////////////////////////////////////////////
#include "SoundEffect.h"
#include "Display.h"
#include "C_TEXTS.h"

namespace NL
{


	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// DistortionSoundEffect class	
	///
	/// Aim: Add distortion sound effect to sound
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	class DistortionSoundEffect : public SoundEffect
	{
	public:


		///////////////////////////////////////////////////////////////////////////////////////////////
		///
		/// Constructor in DistortionSoundEffect class
		///
		/// Aim: Set all variables
		///
		///////////////////////////////////////////////////////////////////////////////////////////////
		DistortionSoundEffect();

		///////////////////////////////////////////////////////////////////////////////////////////////
		///
		/// Destructor in DistortionSoundEffect class
		///
		///////////////////////////////////////////////////////////////////////////////////////////////
		~DistortionSoundEffect();

		///////////////////////////////////////////////////////////////////////////////////////////////
		///
		/// Virtual override function in DistortionSoundEffect class
		///
		/// Aim: Display effect options
		///
		/// Arguments: const std::shared_ptr <Display> &
		///
		/// Returns: void
		///
		///////////////////////////////////////////////////////////////////////////////////////////////
		virtual void ParamDisplay(const std::shared_ptr <Display> & display) override;

		///////////////////////////////////////////////////////////////////////////////////////////////
		///
		/// Virtual override function in DistortionSoundEffect class
		///
		/// Aim: Increase parameter
		///
		/// Arguments: void
		///
		/// Returns: void
		///
		///////////////////////////////////////////////////////////////////////////////////////////////
		virtual void IncreaseParameter() override;

		///////////////////////////////////////////////////////////////////////////////////////////////
		///
		/// Virtual override function in DistortionSoundEffect class
		///
		/// Aim: Decrease parameter
		///
		/// Arguments: void
		///
		/// Returns: void
		///
		///////////////////////////////////////////////////////////////////////////////////////////////
		virtual void DecreaseParameter() override;

	private:

		///////////////////////////////////////////////////////////////////////////////////////////////
		///
		/// Private variable in DistortionSoundEffect class
		///
		/// Aim: (dB)This controls the level in dB of cutting volume of sound's samples from 0 to -100dB
		///
		/// Type: int
		///
		///////////////////////////////////////////////////////////////////////////////////////////////
		int clippingLevel;

		///////////////////////////////////////////////////////////////////////////////////////////////
		///
		/// Private variable in DistortionSoundEffect class
		///
		/// Aim: from 0 to 100. Level of amplification before cutting samples.
		///
		/// Type: int
		///
		///////////////////////////////////////////////////////////////////////////////////////////////
		int drive;

		///////////////////////////////////////////////////////////////////////////////////////////////
		///
		/// Private variable in DistortionSoundEffect class
		///
		/// Aim: from 0 to 100. Level of amplification after cutting samples.
		///
		/// Type: int
		///
		///////////////////////////////////////////////////////////////////////////////////////////////
		int makeUpGain;

		///////////////////////////////////////////////////////////////////////////////////////////////
		///
		/// Private variable in DistortionSoundEffect class
		///
		/// Aim: Stores information about number of displayed parameter.
		///
		/// Type: unsigned int
		///
		///////////////////////////////////////////////////////////////////////////////////////////////
		unsigned int parameterOnDisplay;
		
		///////////////////////////////////////////////////////////////////////////////////////////////
		///
		/// Function in DistortionSoundEffect class
		///
		/// Aim: Makes the main task of this class. Edits sound with distortion effect on specific parameters
		///
		/// Arguments: std::vector <sf::Int16> & soundSamples, unsigned int sampleRate
		///
		/// Returns: void
		///
		///////////////////////////////////////////////////////////////////////////////////////////////
		void makeEffect(std::vector <sf::Int16> & soundSamples, unsigned int sampleRate);
	};

}
#endif // !DISTORTIONSOUNDEFFECT_H


//
//enum class Parameters
//{
//	Clipping_level, //(-100 to 0 dB) : Peaks greater than this level are cut off.The slider control has a logarithmic scale to allow settings close to 0 dB to be made more easily and accurately.
//	Drive,			//(0 to 100) : When set to greater than 0, the waveform is amplified this amount(dB) prior to being clipped.
//	Make_up_Gain	//(0 to 100) : When set greater than 0, the output from the effect is amplified.When set to 100, the amplification is such that an input level of 0 dB(full track height) will produce an output level of 0 dB.
//};