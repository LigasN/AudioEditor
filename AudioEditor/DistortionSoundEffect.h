#pragma once

///////////////////////////////////////////////////////////////////////////////////////////////
///
/// HEADERS
///
///////////////////////////////////////////////////////////////////////////////////////////////
#include "SoundEffect.h"
#include "Display.h"
#include "C_TEXTS.h"

///////////////////////////////////////////////////////////////////////////////////////////////
///
/// DistortionSoundEffect class	
///
/// Aim: Add distortion sound effect to sound
///
///////////////////////////////////////////////////////////////////////////////////////////////
class DistortionSoundEffect : public SoundEffect
{
public:


	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Constructor in DistortionSoundEffect class
	///
	/// Aim: Set all variables
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	DistortionSoundEffect();

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Destructor in DistortionSoundEffect class
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	~DistortionSoundEffect();

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Virtual override function in DistortionSoundEffect class
	///
	/// Aim: Display effect options
	///
	/// Arguments: const std::shared_ptr <Display> &
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual void ParamDisplay(const std::shared_ptr <Display> & display) override;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Virtual override function in DistortionSoundEffect class
	///
	/// Aim: Increase parameter
	///
	/// Arguments: void
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual void IncreaseParameter() override;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Virtual override function in DistortionSoundEffect class
	///
	/// Aim: Decrease parameter
	///
	/// Arguments: void
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual void DecreaseParameter() override;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Virtual function in DistortionSoundEffect class
	///
	/// Aim: change parameter on setting by increasing parameterOnDisplay variable
	///
	/// Arguments: void
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual void NextParameterSettings() override;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Virtual function in DistortionSoundEffect class
	///
	/// Aim: change parameter on setting by decreasing parameterOnDisplay variable
	///
	/// Arguments: void
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual void PreviousParameterSettings() override;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Virtual override function in DistortionSoundEffect class
	///
	/// Aim: returns names of effect
	///
	/// Arguments: void
	///
	/// Returns: EffectManager::Effects 
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual SoundEffect::Effects GetEffectName() override;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Virtual override function in DistortionSoundEffect class
	///
	/// Aim: Returns number of displayed parameter
	///
	/// Arguments: void
	///
	/// Returns: unsigned int
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	unsigned int GetParameterOnDisplay() override;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Virtual function in DistortionSoundEffect class
	///
	/// Aim: Changes effect status to opposite by changing effectStatus variable
	///
	/// Arguments: void
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual void ChangeEffectStatus() override;

private:

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private variable in DistortionSoundEffect class
	///
	/// Aim: (dB)This controls the level in dB of cutting volume of sound's samples from 0 to -100dB
	///
	/// Type: int
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	int clippingLevel;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private variable in DistortionSoundEffect class
	///
	/// Aim: from 0 to 100. Level of amplification before cutting samples.
	///
	/// Type: int
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	int drive;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private variable in DistortionSoundEffect class
	///
	/// Aim: from 0 to 100. Level of amplification after cutting samples.
	///
	/// Type: int
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	int makeUpGain;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private variable in DistortionSoundEffect class
	///
	/// Aim: Stores information about number of displayed parameter.
	///
	/// Type: unsigned int
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	unsigned int parameterOnDisplay;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private variable in DistortionSoundEffect class
	///
	/// Aim: Stores information about effect status. To know if it should be added to sound or not.
	///
	/// Type: boolean
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	bool effectStatus;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Function in DistortionSoundEffect class
	///
	/// Aim: Makes the main task of this class. Edits sound with distortion effect on specific parameters
	///
	/// Arguments: std::vector <sf::Int16> & soundSamples, unsigned int sampleRate
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	void makeEffect(std::vector <sf::Int16> & soundSamples, unsigned int sampleRate);

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private variable in DistortionSoundEffect class
	///
	/// Aim: Stores information about number of effect's parameters
	///
	/// Type: int 
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	int numberOfParameters{};
};