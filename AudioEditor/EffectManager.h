#pragma once

///////////////////////////////////////////////////////////////////////////////////////////////
///
/// HEADERS
///
///////////////////////////////////////////////////////////////////////////////////////////////
#include "Display.h"
#include <memory>
#include "DelaySoundEffect.h"
#include "DistortionSoundEffect.h"
#include "EchoSoundEffect.h"
#include "TremoloSoundEffect.h"
#include "SFML/Audio.hpp"


///////////////////////////////////////////////////////////////////////////////////////////////
///
/// EffectManager class	
///
/// Aim: Manager with effect classes
///
///////////////////////////////////////////////////////////////////////////////////////////////
class EffectManager
{
private:

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private variable in EffectManager class
	///
	/// Aim: Stores pointer to effect which being used at the moment
	///
	/// Type: std::shared_ptr <SoundEffect> 
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	std::shared_ptr <SoundEffect> effect;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private variable in EffectManager class
	///
	/// Aim: Pointer to delay effect
	///
	/// Type: std::shared_ptr <DelaySoundEffect>
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	std::shared_ptr <DelaySoundEffect> delaySoundEffect;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private variable in EffectManager class
	///
	/// Aim: Pointer to distortion effect
	///
	/// Type: std::shared_ptr <DistortionSoundEffect>
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	std::shared_ptr <DistortionSoundEffect> distortionSoundEffect;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private variable in EffectManager class
	///
	/// Aim: Pointer to echo effect
	///
	/// Type: std::shared_ptr <EchoSoundEffect>
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	std::shared_ptr <EchoSoundEffect> echoSoundEffect;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private variable in EffectManager class
	///
	/// Aim: Pointer to tremolo effect
	///
	/// Type: std::shared_ptr <TremoloSoundEffect>
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	std::shared_ptr <TremoloSoundEffect> tremoloSoundEffect;


public:

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Constructor in EffectManager class
	///
	/// Aim: Set all variables
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	EffectManager();

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Destructor in EffectManager class
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	~EffectManager();

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Function in EffectManager class
	///
	/// Aim: sets proper effect to work with sound
	///
	/// Arguments: Effects effectName
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	void setEffect(SoundEffect::Effects effectName);

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Function in EffectManager class
	///
	/// Aim: remakes sound with proper effect
	///
	/// Arguments: sf::SoundBuffer & sound
	///
	/// Returns: sf::SoundBuffer 
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	sf::SoundBuffer remakeSound(sf::SoundBuffer & sound);

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Function in EffectManager class
	///
	/// Aim: Displays proper parameter of effect settings on screen
	///
	/// Arguments: const std::shared_ptr <Display> &
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	void DisplayParameters(const std::shared_ptr <Display> & display);

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Function in EffectManager class
	///
	/// Aim: change parameter to display settings by increment
	///
	/// Arguments: void
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	void NextParameterSettings();

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Function in EffectManager class
	///
	/// Aim: change parameter to display settings by decrement
	///
	/// Arguments: void
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	void PreviousParameterSettings();

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Function in EffectManager class
	///
	/// Aim: increase value of proper parameter
	///
	/// Arguments: void
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	void IncreaseParameter();

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Function in EffectManager class
	///
	/// Aim: decrease value of proper parameter
	///
	/// Arguments: void
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	void DecreaseParameter();

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Function in EffectManager class
	///
	/// Aim: Changes status of effect (ON/OFF)
	///
	/// Arguments: void
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	void UpdateEffectStatus(bool buttonStatus);

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Function in EffectManager class
	///
	/// Aim: returns number of parameter displayed on screen
	///
	/// Arguments: void
	///
	/// Returns: unsigned int 
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	unsigned int GetParameterOnDisplay();

};
