#pragma once

#ifndef SOUNDEFFECT_H
#define SOUNDEFFECT_H

///////////////////////////////////////////////////////////////////////////////////////////////
///
/// HEADERS
///
///////////////////////////////////////////////////////////////////////////////////////////////
#include <vector>
#include "SFML/Audio.hpp"
#include <assert.h>
#include <math.h>

namespace NL
{
	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// SoundEffect class
	///
	/// Aim: Parent for Effect's classes.
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	class SoundEffect
	{
	private:

		///////////////////////////////////////////////////////////////////////////////////////////////
		///
		/// Virtual zero function in SoundEffect class
		///
		/// Aim: inner function to edit sound with effect
		///
		/// Arguments: std::vector <sf::Int16> & soundSamples
		///
		/// Returns: void
		///
		///////////////////////////////////////////////////////////////////////////////////////////////
		virtual void makeEffect(std::vector <sf::Int16> & soundSamples) = 0; //przylad funkcja uzywana wewnetrznie zeby ostatecznie przekazac efekt do remakeSound()

	protected:

		///////////////////////////////////////////////////////////////////////////////////////////////
		///
		/// Protected variable in SoundEffect class
		///
		/// Aim: Stores number of effect displayed on screen
		///
		/// Type: unsigned int
		///
		///////////////////////////////////////////////////////////////////////////////////////////////
		unsigned int parameterOnDisplay;

		///////////////////////////////////////////////////////////////////////////////////////////////
		///
		/// Private variable in SoundEffect class
		///
		/// Aim: Stores information about effect status. To know if it should be added to sound or not.
		///
		/// Type: boolean
		///
		///////////////////////////////////////////////////////////////////////////////////////////////
		bool effectStatus;

	public:

		///////////////////////////////////////////////////////////////////////////////////////////////
		///
		/// Constructor in SoundEffect class
		///
		/// Aim: Set all variables
		///
		///////////////////////////////////////////////////////////////////////////////////////////////
		SoundEffect();

		///////////////////////////////////////////////////////////////////////////////////////////////
		///
		/// Destructor in SoundEffect class
		///
		///////////////////////////////////////////////////////////////////////////////////////////////
		~SoundEffect();

		///////////////////////////////////////////////////////////////////////////////////////////////
		///
		/// Virtual override function in SoundEffect class
		///
		/// Aim: Remakes sound with proper sound effect by reference
		///
		/// Arguments: sf::SoundBuffer & sound
		///
		/// Returns: sf::SoundBuffer
		///
		///////////////////////////////////////////////////////////////////////////////////////////////
		sf::SoundBuffer remakeSound(sf::SoundBuffer & sound);

		///////////////////////////////////////////////////////////////////////////////////////////////
		///
		/// Virtual zero function in SoundEffect class
		///
		/// Aim: Displays parameter's settings on screen
		///
		/// Arguments: const std::shared_ptr <Display> & display
		///
		/// Returns: void
		///
		///////////////////////////////////////////////////////////////////////////////////////////////
		virtual void ParamDisplay(const std::shared_ptr <Display> & display) = 0;

		///////////////////////////////////////////////////////////////////////////////////////////////
		///
		/// Virtual function in SoundEffect class
		///
		/// Aim: change parameter on setting by increasing parameterOnDisplay variable
		///
		/// Arguments: void
		///
		/// Returns: void
		///
		///////////////////////////////////////////////////////////////////////////////////////////////
		virtual void NextParameterSettings();

		///////////////////////////////////////////////////////////////////////////////////////////////
		///
		/// Virtual function in SoundEffect class
		///
		/// Aim: change parameter on setting by decreasing parameterOnDisplay variable
		///
		/// Arguments: void
		///
		/// Returns: void
		///
		///////////////////////////////////////////////////////////////////////////////////////////////
		virtual void PreviousParameterSettings();

		///////////////////////////////////////////////////////////////////////////////////////////////
		///
		/// Virtual zero function in SoundEffect class
		///
		/// Aim: Increase proper  parameter
		///
		/// Arguments: void
		///
		/// Returns: void
		///
		///////////////////////////////////////////////////////////////////////////////////////////////
		virtual void IncreaseParameter() = 0;

		///////////////////////////////////////////////////////////////////////////////////////////////
		///
		/// Virtual zero function in SoundEffect class
		///
		/// Aim: Decrease proper parameter
		///
		/// Arguments: void
		///
		/// Returns: void
		///
		///////////////////////////////////////////////////////////////////////////////////////////////
		virtual void DecreaseParameter() = 0;

		///////////////////////////////////////////////////////////////////////////////////////////////
		///
		/// Virtual function in SoundEffect class
		///
		/// Aim: Changes effect status to opposite by changing effectStatus variable
		///
		/// Arguments: void
		///
		/// Returns: void
		///
		///////////////////////////////////////////////////////////////////////////////////////////////
		virtual void ChangeEffectStatus();

		///////////////////////////////////////////////////////////////////////////////////////////////
		///
		/// Virtual function in SoundEffect class
		///
		/// Aim: returns variable parameterOnDisplay
		///
		/// Arguments: void
		///
		/// Returns: unsigned int 
		///
		///////////////////////////////////////////////////////////////////////////////////////////////
		virtual unsigned int GetParameterOnDisplay();
	};
}
#endif // !SOUNDEFFECT_H
