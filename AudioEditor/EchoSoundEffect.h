#pragma once

///////////////////////////////////////////////////////////////////////////////////////////////
///
/// HEADERS
///
///////////////////////////////////////////////////////////////////////////////////////////////
#include "SoundEffect.h"
#include "Display.h"
#include "C_TEXTS.h"

///////////////////////////////////////////////////////////////////////////////////////////////
///
/// EchoSoundEffect class	
///
/// Aim: Add echo sound effect to sound
///
///////////////////////////////////////////////////////////////////////////////////////////////
class EchoSoundEffect : public SoundEffect
{
public:


	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Constructor in EchoSoundEffect class
	///
	/// Aim: Set all variables
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	EchoSoundEffect();

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Destructor in EchoSoundEffect class
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	~EchoSoundEffect();

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Virtual override function in EchoSoundEffect class
	///
	/// Aim: Display effect options
	///
	/// Arguments: const std::shared_ptr <Display> &
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual void ParamDisplay(const std::shared_ptr <Display> & display) override;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Virtual override function in EchoSoundEffect class
	///
	/// Aim: Increase parameter
	///
	/// Arguments: void
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual void IncreaseParameter() override;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Virtual override function in EchoSoundEffect class
	///
	/// Aim: Decrease parameter
	///
	/// Arguments: void
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual void DecreaseParameter() override;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Virtual function in EchoSoundEffect class
	///
	/// Aim: change parameter on setting by increasing parameterOnDisplay variable
	///
	/// Arguments: void
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual void NextParameterSettings() override;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Virtual function in EchoSoundEffect class
	///
	/// Aim: change parameter on setting by decreasing parameterOnDisplay variable
	///
	/// Arguments: void
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual void PreviousParameterSettings() override;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Virtual override function in EchoSoundEffect class
	///
	/// Aim: returns names of effect
	///
	/// Arguments: void
	///
	/// Returns: EffectManager::Effects 
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual SoundEffect::Effects GetEffectName() override;


	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Virtual override function in EchoSoundEffect class
	///
	/// Aim: Returns number of displayed parameter
	///
	/// Arguments: void
	///
	/// Returns: unsigned int
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	unsigned int GetParameterOnDisplay() override;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Virtual function in EchoSoundEffect class
	///
	/// Aim: Changes effect status to opposite by changing effectStatus variable
	///
	/// Arguments: void
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual void ChangeEffectStatus() override;

private:

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private variable in EchoSoundEffect class
	///
	/// Aim: The amount of delay between the echoes.
	///
	/// Type: int
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	int delayTime;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private variable in EchoSoundEffect class
	///
	/// Aim:  More than 0 and less than 10. When set 1 level of each echo is the same. When more 
	///		  echo is loader than sound, if less it dies in time.
	///
	/// Type: float
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	float decayFactor;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private variable in EchoSoundEffect class
	///
	/// Aim: Stores information about number of displayed parameter.
	///
	/// Type: unsigned int
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	unsigned int parameterOnDisplay;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// function in EchoSoundEffect class
	///
	/// Aim: Makes the main task of this class. Edits sound with echo effect on specific parameters
	///
	/// Arguments: std::vector <sf::Int16> & soundSamples, unsigned int sampleRate
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	void makeEffect(std::vector <sf::Int16> & soundSamples, unsigned int sampleRate);

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private variable in EchoSoundEffect class
	///
	/// Aim: Stores information about number of effect's parameters
	///
	/// Type: int 
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	int numberOfParameters{};

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private variable in EchoSoundEffect class
	///
	/// Aim: Stores information about effect status. To know if it should be added to sound or not.
	///
	/// Type: boolean
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	bool effectStatus;
};