#pragma once

/////////////////////////////////////////////////////////////////////////////
//
// HEADERS
//
/////////////////////////////////////////////////////////////////////////////
#include <SFML/Audio.hpp>
#include <iostream>					///do usuniecia po testwach
#include "Buttons.h"

///////////////////////////////////////////////////////////////////////////////////////////////
///
///	Class SoundStorage
///
/// Aim: Stores sound, some information about it, download and save to file in wav.
///
///////////////////////////////////////////////////////////////////////////////////////////////
class SoundStorage
{
private:

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Object of class SoundBuffer in SoundStorage class
	///
	/// Aim: Stores sound
	///
	/// Type: SoundBuffer
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	sf::SoundBuffer sound;

public:

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Constructor in Display class
	///
	/// Aim: Set all variables liberally 
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	SoundStorage();

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Destructor in Display class
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	~SoundStorage();

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Parametrical constructor in Display class
	///
	/// Aim: Set all parametrs as wanted
	///
	/// Arguments:	-sf::RectangleShape			-shape of display
	///								(most important is size of button and position)
	///
	///	Warning: Shape can be round, rectangle or convex like in SFML
	///////////////////////////////////////////////////////////////////////////////////////////////
	SoundStorage(std::string soundAdress);

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Parametrical constructor in Display class
	///
	/// Aim: Set all parametrs as wanted
	///
	/// Arguments:	-sf::RectangleShape			-shape of display
	///								(most important is size of button and position)
	///
	///	Warning: Shape can be round, rectangle or convex like in SFML
	///////////////////////////////////////////////////////////////////////////////////////////////
	SoundStorage(sf::SoundBuffer sound);
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Parametrical constructor in Display class
	///
	/// Aim: Set all parametrs as wanted
	///
	/// Arguments:	-sf::RectangleShape			-shape of display
	///								(most important is size of button and position)
	///
	///	Warning: Shape can be round, rectangle or convex like in SFML
	///////////////////////////////////////////////////////////////////////////////////////////////
	SoundStorage(const SoundStorage & sound);

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Function in Display class
	///
	/// Aim: Set text from C_TEXTS class on display
	///
	/// Arguments:	-C_TEXTS::TEXT_ID			- id of text
	///
	/// Returns: Boolean
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	void Play(const std::shared_ptr <Buttons> buttons);

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Variable  in ConvexButton class
	///
	/// Aim: Stores information about status of button. If true it is pushed, if not it is not.
	///
	/// Type: Boolean
	///
	///////////////////////////////////////////////////////////////////////////////////////////////

};

