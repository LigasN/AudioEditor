#pragma once

/////////////////////////////////////////////////////////////////////////////
//
// HEADERS
//
/////////////////////////////////////////////////////////////////////////////
#include <SFML/Graphics.hpp>
#include "RectangleButton.h"
#include "ConvexButton.h"
#include <Windows.h>

///////////////////////////////////////////////////////////////////////////////////////////////
///
///	Class Buttons
///
/// Aim: Stores some information about all buttons in program, control all buttons, 
///		 give informations about pushed buttons
///
///////////////////////////////////////////////////////////////////////////////////////////////
class Buttons : public sf::Drawable
{
private:

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Object of class Color in Buttons class
	///
	/// Aim: Stores color of all buttons when pushed
	///
	/// Type: sf::Color
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	sf::Color color = sf::Color(0, 255, 255, 255);

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Object of class Vector2f in Buttons class
	///
	/// Aim: Stores size of effect button
	///
	/// Type: const sf::Vector2f
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	const sf::Vector2f effectButtonSize = sf::Vector2f(152.f, 240.f);

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Object of class RectangleButton in Buttons class
	///
	/// Aim: Stores the first effect button
	///
	/// Type: RectangleButton
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	RectangleButton FirstEffectButton;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Object of class RectangleButton in Buttons class
	///
	/// Aim: Stores the second effect button
	///
	/// Type: RectangleButton
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	RectangleButton SecondEffectButton;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Object of class RectangleButton in Buttons class
	///
	/// Aim: Stores the third effect button
	///
	/// Type: RectangleButton
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	RectangleButton ThirdEffectButton;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Object of class RectangleButton in Buttons class
	///
	/// Aim: Stores the fourth effect button
	///
	/// Type: RectangleButton
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	RectangleButton FourthEffectButton;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Object of class ConvexButton in Buttons class
	///
	/// Aim: Stores the play button
	///
	/// Type: ConvexButton
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	ConvexButton PlayButtonArea;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Object of class ConvexButton in Buttons class
	///
	/// Aim: Stores the stop button
	///
	/// Type: ConvexButton
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	ConvexButton StopButtonArea;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Object of class ConvexButton in Buttons class
	///
	/// Aim: Stores the clean button
	///
	/// Type: ConvexButton
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	ConvexButton CleanButtonArea;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Object of class ConvexButton in Buttons class
	///
	/// Aim: Stores the right arrow button
	///
	/// Type: ConvexButton
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	ConvexButton RightArrowButtonArea;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Object of class ConvexButton in Buttons class
	///
	/// Aim: Stores the left arrow button
	///
	/// Type: ConvexButton
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	ConvexButton LeftArrowButtonArea;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Object of class ConvexButton in Buttons class
	///
	/// Aim: Stores the up arrow button
	///
	/// Type: ConvexButton
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	ConvexButton UpArrowButtonArea;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Object of class ConvexButton in Buttons class
	///
	/// Aim: Stores the down arrow button
	///
	/// Type: ConvexButton
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	ConvexButton DownArrowButtonArea;


	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private variable in Buttons class
	///
	/// Aim: Stores pointer to sf::Window which helps get proper coordinates of mouse.
	///
	/// Type: const std::shared_ptr <sf::Window> 
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	const std::shared_ptr <sf::Window> relativeTo;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private virtual const override function in Buttons class
	///
	/// Aim: Draw button if status is true
	///
	/// Arguments: sf::RenderTarget&, sf::RenderStates
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual void draw(sf::RenderTarget& target, sf::RenderStates state) const override;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Object of class vector in Buttons class
	///
	/// Aim: Stores the sf::Vector2f points of bounds of elliptical buttons
	///
	/// Type: std::vector<sf::Vector2f>
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	std::vector<sf::Vector2f> ellipticalPoints = { sf::Vector2f(-33.5f, 0.f), sf::Vector2f(-33.5f, 5.f),
		sf::Vector2f(-29.5f, 11.f), sf::Vector2f(-21.5f, 17.f), sf::Vector2f(-10.5f, 21.f),
		sf::Vector2f(0.f, 21.f), sf::Vector2f(10.5f, 21.f), sf::Vector2f(21.5f, 17.f),
		sf::Vector2f(29.5f, 11.f), sf::Vector2f(33.5f, 5.f), sf::Vector2f(33.5f, 0.f),
		sf::Vector2f(33.5f, -5.f), sf::Vector2f(29.5f, -11.f), sf::Vector2f(21.5f, -17.f),
		sf::Vector2f(10.5f, -21.f), sf::Vector2f(0.f, -21.f), sf::Vector2f(-10.5f, -21.f),
		sf::Vector2f(-21.5f, -17.f), sf::Vector2f(-29.5f, -11.f), sf::Vector2f(-33.5f, -5.f) };

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Object of class vector in Buttons class
	///
	/// Aim: Stores the sf::Vector2f points of bounds of triangular buttons
	///
	/// Type: std::vector<sf::Vector2f>
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	std::vector<sf::Vector2f> triangularPoints = { sf::Vector2f(-56.f, 0.f), sf::Vector2f(56.f, 64.5f),
		sf::Vector2f(56.f, -64.5f) };


public:

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Destructor in Buttons class
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	~Buttons();

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Parametrical constructor in Buttons class
	///
	///	Arguments: const std::shared_ptr <sf::Window>
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	Buttons(const std::shared_ptr <sf::Window> relativeTo);

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Class enum in Buttons class
	///
	/// Aim: Stores names of positions of mouse
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	enum class MousePositions
	{
		noneButton,
		firstEffectButton,
		secondEffectButton,
		thirdEffectButton,
		fourthEffectButton,
		playButton,
		stopButton,
		cleanButton,
		rightArrowButton,
		leftArrowButton,
		upArrowButton,
		downArrowButton
	};

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Function in Buttons class
	///
	/// Aim: Update status of Buttons and return named position of mouse
	///
	/// Arguments: void
	///
	/// Returns: Buttons::MousePositions
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	Buttons::MousePositions ButtonUpdate();

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Function in Buttons class
	///
	/// Aim: Set proper button on
	///
	/// Arguments: Buttons::MousePositions
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	void setOn(Buttons::MousePositions button);

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Function in Buttons class
	///
	/// Aim: Set proper button off
	///
	/// Arguments: Buttons::MousePositions
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	void setOff(Buttons::MousePositions button);

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Function in Buttons class
	///
	/// Aim: Returns status of proper button (on/off) true if on.
	///
	/// Arguments: Buttons::MousePositions
	///
	/// Returns: Boolean
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	bool getButtonsStatus(Buttons::MousePositions button);
};
