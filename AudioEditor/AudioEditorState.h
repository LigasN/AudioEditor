#pragma once

///////////////////////////////////////////////////////////////////////////////////////////////
///
/// HEADERS
///
///////////////////////////////////////////////////////////////////////////////////////////////
#include "Display.h"
#include "C_TEXTS.h"
#include "EffectManager.h"

///////////////////////////////////////////////////////////////////////////////////////////////
///
/// AudioEditorState class	
///
/// Aim: State design pattern base class
///
///////////////////////////////////////////////////////////////////////////////////////////////
class AudioEditorState
{
public:

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Enum class in AudioEditorState class
	///
	/// Aim: Stores states names
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	enum class States
	{
		BaseClass,
		NoneEffectState,
		FirstButtonEffect,
		SecondButtonEffect,
		ThirdButtonEffect,
		FourthButtonEffect,
		Player
	};


protected:

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Object of class std::shared_ptr in AudioEditorState class
	///
	/// Aim: Stores pinter to main display in program
	///
	/// Type: const std::shared_ptr <Display> 
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	const std::shared_ptr <Display> display;
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Object of class Color in AudioEditorState class
	///
	/// Aim: Stores pinter to EffectManager
	///
	/// Type: const std::shared_ptr <EffectManager> 
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	const std::shared_ptr <EffectManager> effectManager;


public:

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Constructor in AudioEditorState class
	///
	/// Aim: Set all variables liberally.
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	AudioEditorState();

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Parametrical constructor in AudioEditorState class
	///
	///	Arguments:	- const std::shared_ptr <Display> &	- pointer to main display in program
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	AudioEditorState(const std::shared_ptr <Display> & display);

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Destructor in AudioEditorState class
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	~AudioEditorState();

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Public virtual function in AudioEditorState class
	///
	/// Aim: Returns name of this state. Needed for other part of program.
	///
	///	Arguments:	- void
	///
	/// Returns: States
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual States getStateName();

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Public virtual function in AudioEditorState class
	///
	/// Aim: Sets next parameter of effect to edit.
	///
	///	Arguments:	- void
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual void NextParameterSettings();

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Public virtual function in AudioEditorState class
	///
	/// Aim: Sets previous parameter of effect to edit.
	///
	///	Arguments:	- void
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual void PreviousParameterSettings();

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Public virtual function in AudioEditorState class
	///
	/// Aim: Increase proper parameter in effect
	///
	///	Arguments:	- void
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual void IncreaseParameter();

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Public virtual function in AudioEditorState class
	///
	/// Aim: Decrease proper parameter in effect.
	///
	///	Arguments:	- void
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual void DecreaseParameter();

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Public virtual function in AudioEditorState class
	///
	/// Aim: Updates effect status(on/off) by info from button(pushed/released)
	///
	///	Arguments:	- bool	- button information
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual void UpdateEffectStatus(bool buttonStatus);

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Public virtual function in AudioEditorState class
	///
	/// Aim: Updates display bu proper text
	///
	///	Arguments:	- void
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual void UpdateDisplay();

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Public virtual function in AudioEditorState class
	///
	/// Aim: Returns effect manager reference
	///
	///	Arguments:	- void
	///
	/// Returns: const std::shared_ptr <EffectManager> & 
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual const std::shared_ptr <EffectManager> & getEffectManager();
};
