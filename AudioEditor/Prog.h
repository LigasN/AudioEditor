#pragma once

///////////////////////////////////////////////////////////////////////////////////////////////
///
/// HEADERS
///
///////////////////////////////////////////////////////////////////////////////////////////////
#include <SFML/Graphics.hpp>
#include <SFML/Window.hpp>
#include "C_TEXTS.h"
#include <memory>
#include <assert.h>
#include "Buttons.h"
#include "Display.h"
#include "AudioEditorManager.h"

///////////////////////////////////////////////////////////////////////////////////////////////
///
/// Prog class	
///
/// Aim: Engine of this program. Here everything stats and from it works.
///
///////////////////////////////////////////////////////////////////////////////////////////////
class Prog
{
	/////////////////////////////////////////////////////////////////////////////
	//
	// Default constructor and others writed in private because Singleton
	//
	/////////////////////////////////////////////////////////////////////////////

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private parametrical constructor in Prog class
	///
	///	Arguments:	- const std::shared_ptr < sf::RenderWindow > &	- pointer to window of program
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	Prog(const std::shared_ptr < sf::RenderWindow > & window);

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private copy constructor in Prog class
	///
	/// Aim: It is deleted function
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	Prog(const Prog&) = delete;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private operator in Prog class
	///
	/// Aim: It is deleted function
	///
	///	Arguments:	- const Prog &	- It is deleted function
	///
	/// Returns: Prog &
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	Prog& operator=(const Prog&) = delete;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private destructor in Prog class
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	~Prog();

	/////////////////////////////////////////////////////////////////////////////
	///
	/// Unique pointer to C_TEXTS class object to load texts from file
	/// and handle with it
	///
	/////////////////////////////////////////////////////////////////////////////
	std::unique_ptr < C_TEXTS > TEXTS_object;

	/////////////////////////////////////////////////////////////////////////////
	///
	/// Static pointer with adress of Prog class instance ( Singleton )
	///
	/////////////////////////////////////////////////////////////////////////////
	static Prog * instance;

	/////////////////////////////////////////////////////////////////////////////
	///
	/// Boolean variable which stores information about 
	/// user wish to exit the application
	///
	/////////////////////////////////////////////////////////////////////////////
	bool Exit;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private object of class std::shared_ptr in Prog class
	///
	/// Aim: Stores pointer to class whch stores all the buttons of program
	///
	/// Type: std::shared_ptr <Buttons> 
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	std::shared_ptr <Buttons> buttons;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	///	Private object of class std::shared_ptr in Prog class
	///
	/// Aim: Stores pointer to Display which stores and control display apparent for user
	///
	/// Type: std::shared_ptr < Display > 
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	std::shared_ptr < Display > display;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///	
	/// Private object of class std::shared_ptr in Prog class
	///
	/// Aim: Stores pointer to class sf::RenderWindow which stores and control display apparent for user
	///
	/// Type: const std::shared_ptr < sf::RenderWindow > 
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	const std::shared_ptr < sf::RenderWindow > window;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private object of class AudioEditorManager in Prog class
	///
	/// Aim: Create main habbits of program. Controls pretty everything in it.
	///
	/// Type: AudioEditorManager
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	AudioEditorManager audioEditorManager;


public:

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Function in Prog class
	///
	/// Aim: Return instance of Prog class (Singleton)
	///
	/// Way: - Returns static variable instance
	///
	/// Returns: static Prog *
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	static Prog * getInstance(const std::shared_ptr <sf::RenderWindow > & window);

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Function in Prog class
	///
	/// Aim: Update status of Prog engine
	///
	/// Way: - Take sf::RenderWindow& object as argument
	///		 - All starts here and ends here
	///		 - Returns true if user is continuing
	///		 - Returns false if user ended
	///
	/// Returns: Boolean
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	bool Update();

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Function in Prog class
	///
	/// Aim: Return status of program
	///
	/// Way: - Returns true if user wants to exit
	///		 - Returns false if not
	///
	/// Returns: Boolean
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	bool getExit();
};
