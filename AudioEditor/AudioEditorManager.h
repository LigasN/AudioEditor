#pragma once

///////////////////////////////////////////////////////////////////////////////////////////////
///
/// HEADERS
///
///////////////////////////////////////////////////////////////////////////////////////////////
#include "Buttons.h"
#include "Display.h"
#include <memory>
#include "FirstButtonEffect.h"
#include "SecondButtonEffect.h"
#include "ThirdButtonEffect.h"
#include "FourthButtonEffect.h"
#include "AudioPlayer.h"
#include "NoneEffectState.h"
#include <assert.h>
#include "C_TEXTS.h"
#include <Windows.h>

///////////////////////////////////////////////////////////////////////////////////////////////
///
/// AudioEditorManager class	
///
/// Aim: Main class in AudioEditor program. Controls states by clicked buttons. 
///		 Sets texts to display etc.
///
///////////////////////////////////////////////////////////////////////////////////////////////
class AudioEditorManager
{
private:

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private object of class std::shared_ptr in AudioEditorManager class
	///
	/// Aim: Stores pointer to object of AudioEditorState which is current state of the program
	///
	/// Type: std::shared_ptr <AudioEditorState>
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	std::shared_ptr <AudioEditorState> currentState;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private object of class std::shared_ptr in AudioEditorManager class
	///
	/// Aim: Stores pointer to object of FirstButtonEffect which is the first state of the program
	///
	/// Type: const std::shared_ptr <FirstButtonEffect>
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	const std::shared_ptr <FirstButtonEffect> firstButtonEffect;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private object of class std::shared_ptr in AudioEditorManager class
	///
	/// Aim: Stores pointer to object of SecondButtonEffect which is the second state of the program
	///
	/// Type: const std::shared_ptr <SecondButtonEffect>
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	const std::shared_ptr <SecondButtonEffect> secondButtonEffect;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private object of class std::shared_ptr in AudioEditorManager class
	///
	/// Aim: Stores pointer to object of ThirdButtonEffect which is the third state of the program
	///
	/// Type: const std::shared_ptr <ThirdButtonEffect>
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	const std::shared_ptr <ThirdButtonEffect> thirdButtonEffect;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private object of class std::shared_ptr in AudioEditorManager class
	///
	/// Aim: Stores pointer to object of FourthButtonEffect which is the fourth state of the program
	///
	/// Type: const std::shared_ptr <FourthButtonEffect>
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	const std::shared_ptr <FourthButtonEffect> fourthButtonEffect;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private object of class std::shared_ptr in AudioEditorManager class
	///
	/// Aim: Stores pointer to object of AudioPlayer which is the audio state of the program
	///		 Stores sound in clean and edited version, control editor etc.
	///
	/// Type: const std::shared_ptr <AudioPlayer>
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	const std::shared_ptr <AudioPlayer> audioPlayer;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private object of class std::shared_ptr in AudioEditorManager class
	///
	/// Aim: Stores pointer to object of Display which is the main display in program
	///
	/// Type: const std::shared_ptr <Display>
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	const std::shared_ptr < Display > display;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private object of class std::shared_ptr in AudioEditorManager class
	///
	/// Aim: Stores pointer to object of Buttons which stores all buttons control
	///
	/// Type: const std::shared_ptr <Buttons>
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	const std::shared_ptr < Buttons > buttons;


public:

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Parametrical constructor in AudioEditorManager class
	///
	///	Arguments:	const std::shared_ptr <Display> &	-reference to main dispaly in program
	///				const std::shared_ptr <Buttons> &	-reference to main button control class
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	AudioEditorManager(const std::shared_ptr <Display> & display, const std::shared_ptr <Buttons> & buttons);

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Destructor in Buttons class
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	~AudioEditorManager();

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Public function in Buttons class
	///
	/// Aim: Update state of program, like when user push some buttons etc.
	///
	/// Arguments: void
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	void updateState();
};
