#pragma once

///////////////////////////////////////////////////////////////////////////////////////////////
///
/// HEADERS
///
///////////////////////////////////////////////////////////////////////////////////////////////
#include "SoundEffect.h"
#include "Display.h"
#include "C_TEXTS.h"

///////////////////////////////////////////////////////////////////////////////////////////////
///
/// DelaySoundEffect class
///
/// Aim: Add delay to sound
///
///////////////////////////////////////////////////////////////////////////////////////////////
class DelaySoundEffect : public SoundEffect
{
public:

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Constructor in DelaySoundEffect class
	///
	/// Aim: Set all variables
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	DelaySoundEffect();

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Destructor in DelaySoundEffect class
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	~DelaySoundEffect();

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Virtual override function in DelaySoundEffect class
	///
	/// Aim: Display effect options
	///
	/// Arguments: const std::shared_ptr <Display> &
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual void ParamDisplay(const std::shared_ptr <Display> & display) override;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Virtual override function in DelaySoundEffect class
	///
	/// Aim: Increase parameter
	///
	/// Arguments: void
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual void IncreaseParameter() override;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Virtual override function in DelaySoundEffect class
	///
	/// Aim: Decrease parameter
	///
	/// Arguments: void
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual void DecreaseParameter() override;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Virtual function in DelaySoundEffect class
	///
	/// Aim: change parameter on setting by increasing parameterOnDisplay variable
	///
	/// Arguments: void
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual void NextParameterSettings() override;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Virtual function in DelaySoundEffect class
	///
	/// Aim: change parameter on setting by decreasing parameterOnDisplay variable
	///
	/// Arguments: void
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual void PreviousParameterSettings() override;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Virtual override function in DelaySoundEffect class
	///
	/// Aim: Returns name of effect
	///
	/// Arguments: EffectManager::Effects
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual SoundEffect::Effects GetEffectName() override;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Virtual override function in DelaySoundEffect class
	///
	/// Aim: Returns number of displayed parameter
	///
	/// Arguments: void
	///
	/// Returns: unsigned int
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	unsigned int GetParameterOnDisplay() override;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Virtual function in DelaySoundEffect class
	///
	/// Aim: Changes effect status to opposite by changing effectStatus variable
	///
	/// Arguments: void
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual void ChangeEffectStatus() override;

private:

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private variable in DelaySoundEffect class
	///
	/// Aim: (dB)Controls the quickness of dying each echo. When set 1 volume of each echo is the same
	///		 when more the volume is increasing and when less each echo is dying in time
	///
	/// Type: float
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	float delayLevelPerEcho;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private variable in DelaySoundEffect class
	///
	/// Aim: Bigger than 0. In seconds.	Controls the time between echoes.
	///
	/// Type: unsigned int
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	unsigned int delayTime;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private variable in DelaySoundEffect class
	///
	/// Aim: bigger than 1 or smaller but more than 0. Changes speed and tone of sound with each echo
	///		 but in equal gap between.
	///
	/// Type: float
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	float pitchChangeEffect;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private variable in DelaySoundEffect class
	///
	/// Aim: 1 or bigger. Controls the amount by which each successive echo will change pitch.
	///
	/// Type: float
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	float pitchChangePerEcho;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private variable in DelaySoundEffect class
	///
	/// Aim: Zero or more. Controls how many echoes are produced.
	///
	/// Type: unsigned int
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	unsigned int numberOfEchoes;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private variable in DelaySoundEffect class
	///
	/// Aim: Stores information about effect status. To know if it should be added to sound or not.
	///
	/// Type: boolean
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	bool effectStatus;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private variable in DelaySoundEffect class
	///
	/// Aim: Stores information about number of displayed parameter.
	///
	/// Type: unsigned int
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	unsigned int parameterOnDisplay;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Function in DelaySoundEffect class
	///
	/// Aim: Makes the main task of this class. Edits sound with delay effect on specific parameters
	///
	/// Arguments: std::vector <sf::Int16> & soundSamples, unsigned int sampleRate
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	void  makeEffect(std::vector <sf::Int16> & soundSamples, unsigned int sampleRate);

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private variable in DelaySoundEffect class
	///
	/// Aim: Stores information about number of effect's parameters
	///
	/// Type: int 
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	int numberOfParameters{};
};