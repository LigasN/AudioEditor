#pragma once

/////////////////////////////////////////////////////////////////////////////
//
// DEFINES
// Becouse problem with pointers and no time I decided for now make 
// define SOME_SHAPES as commented option to choose between shapes of display
//
/////////////////////////////////////////////////////////////////////////////
//#define SOME_SHAPES

/////////////////////////////////////////////////////////////////////////////
//
// HEADERS
//
/////////////////////////////////////////////////////////////////////////////
#include <SFML/Graphics.hpp>
#include "C_TEXTS.h"
#include <memory>

///////////////////////////////////////////////////////////////////////////////////////////////
///
///	Class Display
///
/// Aim: Control display view on program. Displays text on particular area
///
///////////////////////////////////////////////////////////////////////////////////////////////
class Display : public sf::Drawable
{
private:

#ifdef SOME_SHAPES

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Object of class std::unique_ptr in Display class
	///
	/// Aim: Stores area of the display in any sf::Shape
	///
	/// Type: std::unique_ptr<sf::Shape>
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	std::unique_ptr<sf::Shape> display;

#endif // SOME_SHAPES
#ifndef SOME_SHAPES

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Object of class RectangleShape in Display class
	///
	/// Aim: Stores area of the display
	///
	/// Type: RectangleShape
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	sf::RectangleShape display;

#endif // !SOME_SHAPES

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Object of class C_TEXTS in Display class
	///
	/// Aim: Stores and controls all texts needed in program
	///
	/// Type: C_TEXTS
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	C_TEXTS TEXTS;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Object of class Font in Display class
	///
	/// Aim: Stores and controls font
	///
	/// Type: Font
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	sf::Font font;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Object of class Color in Display class
	///
	/// Aim: Stores color of texts
	///
	/// Type: Color
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	sf::Color textColor = sf::Color(110, 110, 0, 255);

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Object of class Text in Display class
	///
	/// Aim: Stores text and his parameters to display
	///
	/// Type: sf::Text
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	sf::Text text;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Function in Display class
	///
	/// Aim: Draw texts on display from background
	///
	/// Arguments: sf::RenderTarget&, sf::RenderStates
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual void draw(sf::RenderTarget& target, sf::RenderStates state) const override;

public:

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Constructor in Display class
	///
	/// Aim: Set all variables liberally 
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	Display();

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Destructor in Display class
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	~Display();

#ifdef SOME_SHAPES

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Parametrical constructor in Display class
	///
	/// Aim: Set all parametrs as wanted
	///
	/// Arguments:	-std::unique_ptr<sf::Shape> 			-shape of display
	///								(most important is size of button and position)
	///
	///	Warning: Shape can be round, rectangle or convex like in SFML
	///////////////////////////////////////////////////////////////////////////////////////////////
	Display(std::unique_ptr<sf::Shape> shape);

#endif // SOME_SHAPES
#ifndef SOME_SHAPES

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Parametrical constructor in Display class
	///
	/// Aim: Set all parametrs as wanted
	///
	/// Arguments:	-sf::RectangleShape			-shape of display
	///								(most important is size of button and position)
	///
	///	Warning: Shape can be round, rectangle or convex like in SFML
	///////////////////////////////////////////////////////////////////////////////////////////////
	Display(sf::RectangleShape shape);

#endif // SOME_SHAPES

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Parametrical constructor in Display class
	///
	/// Aim: Set all parametrs as wanted. Most basic rectangle display is made by this constructor.
	///		 If You need sth more sophisticated take constructor with unique pointer of sf::Shape
	///
	/// Arguments:	-const sf::Vector2f & 			- size of display
	///		-sf::Vector2f 			- position of display
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	Display(const sf::Vector2f size, sf::Vector2f position);

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Function in Display class
	///
	/// Aim: Set text from C_TEXTS class on display
	///
	/// Arguments:	-C_TEXTS::TEXT_ID			- id of text
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	void setText(const C_TEXTS::TEXT_ID textID);

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Function in Display class
	///
	/// Aim: Set text from C_TEXTS class and number ( like text : 0 ) on display
	///
	/// Arguments:	-C_TEXTS::TEXT_ID			- id of text
	///				-const double				- number
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	void setText(const C_TEXTS::TEXT_ID textID, const std::wstring value);

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Function in Display class
	///
	/// Aim: Set two texts from C_TEXTS class on display like ( text : text )
	///
	/// Arguments:	-C_TEXTS::TEXT_ID			- id of first text
	///				-C_TEXTS::TEXT_ID			- id of second text
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	void setText(const C_TEXTS::TEXT_ID textID1, const C_TEXTS::TEXT_ID textID2);

};