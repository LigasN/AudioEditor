#pragma once

///////////////////////////////////////////////////////////////////////////////////////////////
///
/// HEADERS
///
///////////////////////////////////////////////////////////////////////////////////////////////
#include "SoundEffect.h"
#include <assert.h>
#include "C_TEXTS.h"
#include "Display.h"

///////////////////////////////////////////////////////////////////////////////////////////////
///
/// TremoloSoundEffect class	
///
/// Aim: Add tremolo sound effect to sound
///
///////////////////////////////////////////////////////////////////////////////////////////////
class TremoloSoundEffect : public SoundEffect
{
public:


	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Enum class in TremoloSoundEffect class
	///
	/// Aim: Stores names of waves which can be used in effect
	///
	/// Arguments: void
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	enum class WaveformType
	{
		sin,
		triangle,
		sawtooth,
		inverse_sawtooth,
		square
	};


	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Constructor in TremoloSoundEffect class
	///
	/// Aim: Set all variables
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	TremoloSoundEffect();

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Destructor in TremoloSoundEffect class
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	~TremoloSoundEffect();

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Virtual override function in TremoloSoundEffect class
	///
	/// Aim: Display effect options
	///
	/// Arguments: const std::shared_ptr <Display> &
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual void ParamDisplay(const std::shared_ptr <Display> & display) override;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Virtual override function in TremoloSoundEffect class
	///
	/// Aim: Increase parameter
	///
	/// Arguments: void
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual void IncreaseParameter() override;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Virtual override function in TremoloSoundEffect class
	///
	/// Aim: Decrease parameter
	///
	/// Arguments: void
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual void DecreaseParameter() override;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Virtual function in TremoloSoundEffect class
	///
	/// Aim: change parameter on setting by increasing parameterOnDisplay variable
	///
	/// Arguments: void
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual void NextParameterSettings() override;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Virtual function in TremoloSoundEffect class
	///
	/// Aim: change parameter on setting by decreasing parameterOnDisplay variable
	///
	/// Arguments: void
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual void PreviousParameterSettings() override;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Virtual override function in TremoloSoundEffect class
	///
	/// Aim: returns names of effect
	///
	/// Arguments: void
	///
	/// Returns: EffectManager::Effects 
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual SoundEffect::Effects GetEffectName() override;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Virtual override function in TremoloSoundEffect class
	///
	/// Aim: Returns number of displayed parameter
	///
	/// Arguments: void
	///
	/// Returns: unsigned int
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	unsigned int GetParameterOnDisplay() override;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Virtual function in TremoloSoundEffect class
	///
	/// Aim: Changes effect status to opposite by changing effectStatus variable
	///
	/// Arguments: void
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	virtual void ChangeEffectStatus() override;

private:

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private variable in TremoloSoundEffect class
	///
	/// Aim: Determines the "shape" of tremolo. Choice of sine, triangle, 
	///		 sawtooth, inverse sawtooth, square.
	///
	/// Type: WaveformType
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	WaveformType waveformType;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private variable in TremoloSoundEffect class
	///
	/// Aim: Sets starting phase for tremolo wave.
	///
	/// Type: int
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	int startingPhase;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private variable in TremoloSoundEffect class
	///
	/// Aim: 0 % is no tremolo, 100 % sweeps between zero and maximum 
	///		 volume of sample based on the original amplitude level.
	///
	/// Type: int
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	int wetLevel;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private variable in TremoloSoundEffect class
	///
	/// Aim: frequency(Hz) 10 is quite much. Controls the speed of the oscillation.
	///
	/// Type: int 
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	int frequency;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private variable in TremoloSoundEffect class
	///
	/// Aim: Stores information about number of displayed parameter.
	///
	/// Type: unsigned int
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	unsigned int parameterOnDisplay;

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Virtual override function in TremoloSoundEffect class
	///
	/// Aim: Makes the main task of this class. Edits sound with tremolo effect on specific parameters
	///
	/// Arguments: std::vector <sf::Int16> & soundSamples, unsigned int sampleRate
	///
	/// Returns: void
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	void  makeEffect(std::vector <sf::Int16> & soundSamples, unsigned int sampleRate);

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private variable in TremoloSoundEffect class
	///
	/// Aim: Stores information about number of effect's parameters
	///
	/// Type: int 
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	int numberOfParameters{};

	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	/// Private variable in TremoloSoundEffect class
	///
	/// Aim: Stores information about effect status. To know if it should be added to sound or not.
	///
	/// Type: boolean
	///
	///////////////////////////////////////////////////////////////////////////////////////////////
	bool effectStatus;
};
